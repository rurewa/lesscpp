// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Массивы типа Vector
// Vector - это тот же динамический массив, но который сам может управлять выделенной себе памятью
// vectorBegin.cpp Arrays/Vector
// V 1.0
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include <iostream>
#include <vector>
using namespace std;

// Объявление! vector bool лучше не использовать!

int main() {
    vector<int> arrs(5);
    cout << "Вектор с заданным размером\n";
    for (auto i : arrs) {
        cout << i << ' ';
    }
    cout << endl;
    cout << "Вектор с изменённым размером\n";
    arrs.resize(3);
    for (auto i : arrs) {
        cout << i << ' ';
    }
    cout << endl;
    cout << "Вектор с не указанным размером\n";
    vector<int> array {1}; // Можно не указывать длину массива
    for (auto i : array) {
        cout << i << ' ';
    }
    cout << endl;
    cout << "Проверить вектор на сорержимое\n";
    if (array.empty()) {
        cout << "Вектор пуст!\n";
    }
    else {
        cout << " Вектор что-то содержит\n";
    }
    cout << "Вектор, сотоящий из 5-и звёздочек\n";
    vector<char> myVector(5, '*'); // Вектор, состоящий из 5-и пробелов
    for (auto i : myVector) { cout << i << ' '; } cout << endl;
    cout << "Вектор с указанными данными\n";
    vector<int> arr{10, 15, 20, 30, 14};
    cout << "Длина вектора: " << arr.size() << " , элемент под индексом 2: " << arr[2] << endl;
    cout << "Модификация ветора\n";
    arr.at(2) = 33; // Изменение элемента массива через функцию at (с проверкой выхода за границу массива)
    cout << arr[2] << endl;
    arr = {11, 12, 14};
    cout << "Показать элементы вектора\n";
    cout << arr[0] << ' ' << arr[1] << ' ' << arr[2] << endl; // Допустимо, но не желательно
    cout << arr.at(0) << ' ' << arr.at(1) << ' ' << arr.at(2) << endl; // Так предпочительней
    cout << "Новая длина вектора: " << arr.size() << endl;
    arr.resize(10); // Меняем длину вектора с через функцию resize()
    cout << "Новейшая длина вектора: " << arr.size() << endl;
    cout << "Максимально возможная длина массива: " << arr.max_size() << '\n';
    for (auto i : arr) {
        cout << i << ' ';
    }
    cout << endl;
    // Изменение длины вектора допускается, но не является рекомендуемой операцией
    cout << "Добавилили в вектор новые элементы\n";
    arr.push_back(10); // Этот метод добавляет новый элемент в конец вектора
    for (auto i : arr) {
        cout << i << ' ';
    }
    cout << endl;
    arr.push_back(20);
    for (auto i : arr) { cout << i << ' '; } cout << endl;
    cout << "Удалили один новый элемент\n";
    arr.pop_back(); // Этот метод удаляет последний элемент вектора
    for (auto i : arr) { cout << i << ' '; } cout << endl;
    cout << "Сравнения векторов\n";
    vector<string> v1 {"Num", "Word", "Get"};
    vector<string> v2 {"Num", "Word", "Get"};
    if (v1 == v2) {
        cout << "Они равны!\n";
    }
    else {
        cout << "Они не равны!\n";
    }
    cout << "Добавлили в конец вектора новый элемент\n";
    v1.push_back("our");
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "Добавлили в начало вектора новый элемент\n";
    v1.insert(v1.begin(), "Dear"); // begin() - это итератор
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "Добавлили в конец вектора новый элемент\n";
    v1.insert(v1.end(), "Doors"); // end() - это итератор
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    // Рекомендуется добавлять новые элементы в конец, т.к. это работает быстрей
    string first_view_index = v1.front(), second_view_index = v1.back();
    cout << "Первый элемент вектора: " << first_view_index << " второй элемент вектора: " << second_view_index << '\n';
    cout << "Удаляем элемент вектора\n";
    cout << "До\n";
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "После\n";
    v1.erase(v1.begin() + 1); // 0 + 1
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "Удаляем несколько элементов вектора\n";
    cout << "До\n";
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "После\n";
    v1.erase(v1.begin() + 3, v1.end());
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "Удаляем последний элемент вектора\n";
    v1.pop_back();
    for (auto i : v1) { cout << i << ' '; } cout << endl;
    cout << "Полная очистка вектора\n";
    cout << "До\n";
    for (auto i : v2) { cout << i << ' '; } cout << endl;
    cout << "После\n";
    v2.clear();
    for (auto i : v2) { cout << i << ' '; } cout << endl;
    cout << "Обмениваем элементы 2-х векторов\n";
    vector<int> vec1, vec2;
    // Заполняем 1-й вектор значениями
    for (int i = 0; i != 5; ++i) {
        vec1.push_back(i);
    }
    cout << "Содержимое 1-го вектора\n";
    for (auto i : vec1) { cout << i << ' '; } cout << '\n';
    // Заполняем 2-й вектор значениями
    for (int i = 5; i != 0; --i) {
        vec2.push_back(i);
    }
    cout << "Содержимое 2-го вектора\n";
    for (auto i : vec2) { cout << i << ' '; } cout << '\n';
    // Меняем местами содержимое 2-х векторов
    vec1.swap(vec2);
    cout << "Содержимое 2-го вектора после обмена\n";
    for (auto i : vec2) { cout << i << ' '; } cout << '\n';
    return 0;
}
// Output:
/*
Вектор с заданным размером
0 0 0 0 0
Вектор с изменённым размером
0 0 0
Вектор с не указанным размером
1
Проверить вектор на сорержимое
 Вектор что-то содержит
Вектор, сотоящий из 5-и звёздочек
* * * * *
Вектор с указанными данными
Длина вектора: 5 , элемент под индексом 2: 20
Модификация ветора
33
Показать элементы вектора
11 12 14
11 12 14
Новая длина вектора: 3
Новейшая длина вектора: 10
Максимально возможная длина массива: 2305843009213693951
11 12 14 0 0 0 0 0 0 0
Добавлили в вектор новые элементы
11 12 14 0 0 0 0 0 0 0 10
11 12 14 0 0 0 0 0 0 0 10 20
Удалили один новый элемент
11 12 14 0 0 0 0 0 0 0 10
Сравнения векторов
Они равны!
Добавлили в конец вектора новый элемент
Num Word Get our
Добавлили в начало вектора новый элемент
Dear Num Word Get our
Добавлили в конец вектора новый элемент
Dear Num Word Get our Doors
Первый элемент вектора: Dear второй элемент вектора: Doors
Удаляем элемент вектора
До
Dear Num Word Get our Doors
После
Dear Word Get our Doors
Удаляем несколько элементов вектора
До
Dear Word Get our Doors
После
Dear Word Get
Полная очистка вектора
До
Num Word Get
После

Обмениваем элементы 2-х векторов
Содержимое 1-го вектора
0 1 2 3 4
Содержимое 2-го вектора
5 4 3 2 1
Содержимое 2-го вектора после обмена
0 1 2 3 4
*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
