// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Указатели и функции
// funcRefPoint.cpp
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include<iostream>
using namespace std;

/*
1. Ссылка - не объект, а только другое имя уже существующего объекта.
2. Поскольку ссылки не объекты, нельзя определить ссылку на ссылку.
3. Поскольку ссылки не объекты, у них нет адресов.
4. Типы ссылки и объекта, на который она ссылается, должны совпадать точно.
5. Ссылка может быть связана только с объектом, а не с литералом (это элемент программы, который представляет значение).
6. Ссылки всегда следует инициализировать!
7. Ссылка не может быть изменена после инициализации.

1. Указатель - это настоящий объект!
2. Указатель всегда должен иметь тип.
3. Указатель содержит только адрес.
4. Тип указателя всегда должен соответствовать типу указываемой переменной.
5. Одному указателю можно присваивать разные значения.
6. Указатели в языке C++ по своей природе являются небезопасными.
7. С 64-битным исполняемым файлом указатель всегда будет занимать 64 бита (8 байт)
8. Указатель можно не инициализировать.
9. Между указателем и содержащимся в нём адресом нет жесткой связи
10. Указатель на массив не знает длину массива
*/
//void printSize(int array[]) // C++ неявно конвертирует параметр array[] в *array. Так лучше не делать
void printSize(int *array) {
    // Массив рассматривается как указатель
    cout << sizeof(array) << '\n'; // Размер указателя, а не длина массива!
}

// Параметр *ptr содержит копию адреса массива
void changeArray(int *ptr) {
    *ptr = 5; // Изменение элемента массива изменит фактический массив
}

int main() {
    int array[] {1, 2, 3, 4, 4, 9, 15, 25, 1, 2, 3, 4, 4, 9, 15, 25};
    cout << "длина массива в элементах: " << (sizeof(array) / sizeof(*array)) << " длина массива в байтах: " << sizeof(array) << '\n'; // 4 (int) * длину массива
    // С 64-битным исполняемым файлом указатель всегда будет занимать 64 бита (8 байт)
    // При передаче в функцию массива распадается на указатель
    printSize(array); // 8 байт - размер массива в байтах
    cout << "Значение 0-го элемента: " << array[0] << '\n';
    changeArray(array);
    cout << "Значение 0-го элемента: " << array[0] << '\n';
    return 0;
}
// Output
/*
длина массива в элементах: 16 длина массива в байтах: 64
8
Значение 0-го элемента: 1
Значение 0-го элемента: 5
*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //