// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Составные тимы: указатели и ссылки
// zeroRef.cpp ReferencesPointers
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include<iostream>
using namespace std;

/*
1. Как и обычные переменнык, указатели автоматически не инициализируются при создании;
Если значение не было присвоено, то указатель по умолчанию будет указывать на любой адрес,
содержимым которого является мусор;
2. Инициализируйте указатели нулевым значением, если не собираетесь присваивать им другие значения;
3. Нельзя разыменовывать нулевой указатель!
4. В C++11 используйте nullptr для инициализации нулевых указателей.
*/

int main() {
    int *ptr = 0; // Инициализирован нулём
    int *ptr1; // Не инициализирован
    ptr1 = 0;
    cout << ptr << '\t' << ptr1 << endl;
    cout << typeid(ptr).name() << endl;
    double *dptr (0);
    if (dptr) { // Мой компилятор преобразует if в false
        cout << "Указывает на не нулевое значение" << endl;
    }
    else {
        cout << "нулевой" << endl;
    }
    int *nptr(NULL); // Присваиваем 0 указателю как в Си (не рекомендуется в C++)
    cout << typeid(nptr).name() << &nptr << endl;
    int *nuPtr = nullptr; // Так лучше! Теперь точно это нулевой указатель, а не указатель со знавением 0
    cout << typeid(nuPtr).name() << '\t' << &nuPtr << endl;
    /* int *p;
    int a = 10;
    p = &a;
    cout << *p << endl; */
    return 0;
}

// Output
/*
0       0
Pi
нулевой
Pi0x7ffd361cc338
Pi      0x7ffd361cc330
*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //