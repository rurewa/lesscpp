// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Адресная арифметика
// adrAri.cpp ReferencesPointers
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include<iostream>
using namespace std;

/*
ptr + 1 не возвращает следующий любой адрес памяти, который находится сразу
после ptr, но он возвращает адрес памяти следующего объекта, тип которого
совпадает с типом значения, на которое указывает ptr
*/

int main() {
    puts("Адресная арифметика с типом int");
    int value = 7;
    cout << "Размер переменной value: " << sizeof(value) << " байт\n";
    int *ptr = &value; // Взятие адреса переменной
    cout << "Размер укзателя: " << sizeof(ptr) << " байт\n";
    // Размер указателя в 64-бит.архитектуре всегда 8 байт (64 бита)
    cout << ptr << '\n';
    cout << ptr+1 << '\n'; // Каждый следующий адрес с шагом 4 (размер int)
    cout << ptr+2 << '\n';
    cout << ptr+3 << '\n';
    puts("Адресная арифметика с типом short");
    short svalue = 9;
    short *sptr = &svalue;
    cout << sptr << '\n';
    cout << sptr+1 << '\n';
    cout << sptr+2 << '\n';
    cout << sptr+3 << '\n';
    return 0;
}
// Output
/*
Адресная арифметика с типом int
Размер переменной value: 4 байт
Размер укзателя: 8 байт
0x7ffcaa8e2cc8
0x7ffcaa8e2ccc
0x7ffcaa8e2cd0
0x7ffcaa8e2cd4
Адресная арифметика с типом short
0x7ffcaa8e2cbe
0x7ffcaa8e2cc0
0x7ffcaa8e2cc2
0x7ffcaa8e2cc4
*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //