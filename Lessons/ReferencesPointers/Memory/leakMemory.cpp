//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Утечка памяти
// leakMemory.cpp
// V 1.0
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#include <iostream>
using namespace std;

int main() {
    int value = 7;
    int *ptr = new int; // Выделяем память
    cout << "Старый адрес ptr " << ptr << endl;
    //delete ptr; // Освобождение памяти (Очистка мусора). Добавить позже
    ptr = &value; // Старый адрес утерян - утечка памяти!
    cout << "Новый адрес ptr  " << ptr << endl;
    puts("--------------------------------");
    int *nptr = new int;
    cout << "Старый адрес nptr " << nptr << endl;
    // Двойное выделение памяти
    //delete nptr; // Освобождение памяти (Очистка мусора). Добавить позже
    nptr = new int; // Старый адрес утерян - утечка памяти!
    cout << "Новый адрес nptr  " << nptr << endl;
    // delete nptr; // Освобождение памяти (Очистка мусора). Добавить позже
    return 0;
}
/*
Проверить потенциальные угрозы утечки памяти и висячие указатели можно командами:
1. clang-tidy main.cpp -- -Wall -std=c++14 -x c++
2. valgrind --leak-check=full ./main.bin
3. cppcheck main.cpp
*/
// Д.З.
// Output
/*

*/
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// End file
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-