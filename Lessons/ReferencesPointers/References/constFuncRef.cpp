// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Константные ссылки и функции
// constFuncRef.cpp
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include<iostream>
using namespace std;

void somefcn() {
    const int &ref = 3 + 4; // r-value выражение
    cout << "somefcn: " << ref << '\n';
    /*Обычно r-value имеет область видимости выражения,
    но благодаря константной ссылке область видимости продлевается до
    этой точки*/
}

/* void changeN(const int &ref) {
    ref = 8; // Так нельзя, ref - это константа
} */

void printIt(const int &a) {
    cout << "printIt: " << a << '\n';
    /*Константная ссылка в качестве параметра позволяет
    передавать неконстантный аргумент l-value, константный аргумент l-value,
    литерал или результат выражения*/
}

int main() {
    somefcn();
    int x = 3;
    printIt(x); // Неконстантное l-value
    const int y = 4;
    printIt(y); // Константное l-value
    printIt(5); // Литерал в качестве r-value
    printIt(3+y); // Выражение в качестве r-value
    return 0;
}
// Output
/*
somefcn: 7
printIt: 3
printIt: 4
printIt: 5
printIt: 7
*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //