// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
//
//
// V 1.0
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include <iostream>
using namespace std;

int main() {
    int a = 7;
    cout << a << endl;
    cout << &a << endl;
    //cout << *a << endl; // Так нельзя!
    cout << *&a <<  endl;
    puts("-----------------");
    int value = 5;
    int *ptr = &value; // Инициализируем ptr адресом значения переменной
    cout << ptr << endl; // Выводим адрес, который хранит в себе ptr
    cout << *ptr << endl; // Разыменовали указатель
    int x(4);
    cout << "Возвращает тип указателя: " << typeid(&x).name() << endl;
    char *chPtr;
    int *iPtr;
    double *dPtr;
    puts("Размер указателя всегда 8 байт");
    cout << sizeof(chPtr) << endl;
    cout << sizeof(iPtr) << endl;
    cout << sizeof(dPtr) << endl;
    int var = 5;
    cout << "Адрес переменной var: " << &var << endl;
    int *vPtr = &var;
    cout << "Адрес, который в vPtr: " << vPtr << endl; // Такой же как в var
    cout << "Разыменовываем указатель vPtr: " << *vPtr << endl;
    int value1 = 7, value2 = 11;
    // vPtr = value1; // Так нельзя! Указатель может хранить в себе только адрес другой переменной!
    vPtr = &value1; // Взяли адрес переменной
    cout << *vPtr << endl; // Разыменовали указатель
    vPtr = &value2; // Взяли теперь адрес другой переменной
    cout << *vPtr << endl; // Снова разыменовали указатель
    *vPtr = 7; // Присваиваем значение указателю как обычной переменной
    cout << value1 << endl;
    return 0;
}
// Д.З.
// OUTPUT
/*

*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //