// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
// Ссылки и указатели
//
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
#include<iostream>
using namespace std;
/*
1. Ссылка - не объект, а только другое имя уже существующего объекта.
2. Поскольку ссылки не объекты, нельзя определить ссылку на ссылку.
3. Поскольку ссылки не объекты, у них нет адресов.
4. Типы ссылки и объекта, на который она ссылается, должны совпадать точно.
5. Ссылка может быть связана только с объектом, а не с литералом (это элемент программы, который представляет значение).
6. Ссылки всегда следует инициализировать!
7. Ссылка не может быть изменена после инициализации.

1. Указатель - это настоящий объект!
2. Указатель всегда должен иметь тип.
3. Указатель содержит только адрес.
4. Тип указателя всегда должен соответствовать типу указываемой переменной.
5. Одному указателю можно присваивать разные значения.
6. Указатели в языке C++ по своей природе являются небезопасными.
7. С 64-битным исполняемым файлом указатель всегда будет занимать 64 бита (8 байт)
8. Указатель можно не инициализировать.
9. Между указателем и содержащимся в нём адресом нет жесткой связи
*/

int main() {
    int a(7); // Инициализируем переменную
    // Получаем значение и адрес переменной
    cout << a << '\t'<< &a << '\n';
    int *aa; // Объявляем указатель
    aa = &a; // Присваиваем указателю вдрес другой переменной
    // Получаем адрес и через разименовывание указателя значение
    cout << aa << '\t' << &aa << '\t' << *aa << '\n';
    cout << &*aa << '\n';
    int **b; // Указатель на указатель?
    b = &aa;
    int &cc = a;
    cout << b << '\t' << cc << '\n';
    cout << typeid(b).name() << '\n'; // Тип объекта
    cout << typeid(a).name() << '\n';
    return 0;
}
// Output
/*

*/
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //
// END FILE
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- //